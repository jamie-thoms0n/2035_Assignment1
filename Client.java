/******** DO NOT EDIT THIS FILE ********/
import java.io.IOException;

import java.util.Scanner;

/*
 * This file contains the main methods for the client.
 * Do NOT change anything in this file.
 * 
 * start client as:
 *
 *      java Client <host name> <port number> <CSV file name> <output file name> <patch size> <nm|wt>  
 *
 * Where:
 *      host name is the address of the server
 * 		port number is the port the server is listening on
 *		CSV file name is the name of the csv file that stores the readings
 *      output file name is name for the file to be created on the server to store incoming readings
 *      patch size is the size of the patch to be sent (number of readings to be stored in the segment payload)
 *      nm selects normal transfer mode 
 *      wt selects transfer with time out 
 *
 * Only specify one transfer mode. That is, either nm or wt   
 */

public class Client {

	/* the main method  */
	public static void main(String[] args) throws IOException, InterruptedException {
		if (args.length < 6) {
			System.err.println("Usage: java Client <host name> <port number> <CSV file name> <output file name> <batch Size> <nm|wt>");
			System.err.println("host name: is server IP address (e.g. 127.0.0.1) ");
			System.err.println("port number: is a positive number in the range 1025 to 65535");
			System.err.println("CSV file name: is the file that has the readings to send");
			System.err.println("output file name: is the name of the output file");
			System.err.println("Patch size: is the maximum size of the patch to be sent");
			System.err.println("nm selects normal transfer|wt selects transfer with time out and retransmission");
			System.exit(1);
		}

		//initialise the Protocol attributes
		Protocol.instance.initProtocol(args[0], args[1], args[2], args[3], args[4]);  

		System.out.println ("----------------------------------------------------");
		System.out.println ("CLIENT: File "+ args[2] +" exists  " );
		System.out.println ("----------------------------------------------------");
		System.out.println ("----------------------------------------------------");
		String mode=args[5];
		Scanner sc=new Scanner(System.in);  
		Client client = new Client();

		/* Send meta data to the server */
		System.out.println ("CLIENT: Sending meta data");
		Protocol.instance.sendMetadata() ; 

		System.out.println("------------------------------------------------------------------");
		System.out.println("------------------------------------------------------------------");

		switch(mode)
		{
		//normal mode (ideal scenario)
		case Protocol.NORMAL_MODE:			
			client.sendNormal (); 
			break;
		
		//timeout mode (timeout with retransmission)
		case Protocol.TIMEOUT_MODE: 	
			client.sendWithTimeout(); 
			break; 

		default:
			System.out.println("Error! mode is not recognised");
		} 

		System.out.println("SENDER: File is sent\n");
		sc.close();
	}  

	/*The method used for NORMAL_MODE nm (for part 2) */
	public void sendNormal() throws IOException {  
		while (true)
		{
			Protocol.instance.readAndSend();
			if(!Protocol.instance.receiveAck())  System.exit(0);
		}
	}

	/*The method used for TIMEOUT_MODE wt (for part 3) */
	public void sendWithTimeout() throws IOException {    
		while (true)
		{			
			Protocol.instance.readAndSend();
			Protocol.instance.startTimeoutWithRetransmission();
		}
	}
}
